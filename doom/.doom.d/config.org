#+TITLE: Doom Emacs Config
#+AUTHOR: Alexander Brevig
#+EMAIL: alexanderbrevig@gmail.com
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes

* Table of Contents :TOC_4_gh:
- [[#basic-doom-config][Basic Doom Config]]
  - [[#lexical-binding][Lexical Binding]]
  - [[#personal-information][Personal Information]]
- [[#ui-settings][UI Settings]]
  - [[#fonts][Fonts]]
  - [[#default-theme][Default Theme]]
  - [[#basic-ui-settings][Basic UI Settings]]
- [[#ux-settings][UX Settings]]
  - [[#basic-ux-settings][Basic UX Settings]]
  - [[#stop-confirm-kill][Stop Confirm Kill]]
  - [[#splits-that-works][Splits That Works]]
    - [[#split-direction][Split Direction]]
    - [[#prompt-buffer-on-splits][Prompt Buffer On Splits]]
  - [[#responsive][Responsive]]
  - [[#projectile][Projectile]]
- [[#lsp][LSP]]
  - [[#common-lisp-slime][Common Lisp slime]]
- [[#org][Org]]
  - [[#directory-config][Directory Config]]
  - [[#org-roam][Org Roam]]
    - [[#v2-ftw][v2 FTW]]
    - [[#capture-templates][Capture Templates]]
      - [[#consider-customizing-cap-templ-for-org-roam][Consider customizing cap-templ for org-roam]]
  - [[#autosync-with-git][Autosync with git]]

* Basic Doom Config
** Lexical Binding
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Alexander Brevig"
      user-mail-address "alexanderbrevig@gmail.com")
#+end_src
* UI Settings
** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 16)
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 22)
      doom-variable-pitch-font (font-spec :family "Overpass Nerd Font" :size 14))
#+end_src
** Default Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+end_src
** Basic UI Settings
#+begin_src emacs-lisp
(setq doom-modeline-mode t)

(setq display-line-numbers-type 'relative)
#+end_src
* UX Settings
** Basic UX Settings
#+begin_src emacs-lisp
(setq scroll-margin 5)
#+end_src
** Stop Confirm Kill
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'nil)
#+end_src
** Splits That Works
*** Split Direction
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src
*** Prompt Buffer On Splits
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src
** Responsive
#+begin_src emacs-lisp
(setq which-key-idle-delay 0)
** Projectile
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/entur/bb" "~/entur/gh" "~/entur/mat" "~/github.com" "~/gitlab.com"))
#+end_src
* LSP
#+begin_src emacs-lisp
(flycheck-mode 1)
(format-all-mode 1)
#+end_src
** Common Lisp slime
#+begin_src emacs-lisp
(load (expand-file-name "~/.quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+end_src
* Org
** Directory Config
#+begin_src emacs-lisp
(setq org-directory "~/github.com/org/")
(after! org
  (setq org-agenda-files (list "~/github.com/dotfiles/doom/.doom.d/config.org"
                               "~/github.com/org/")))
(setq org-roam-directory "~/github.com/org-roam/")
#+end_src
** Org Roam
*** v2 FTW
#+begin_src emacs-lisp
(setq org-roam-v2-ack t)

(use-package! org-roam
  :after org
  :config
  (setq org-roam-v2-ack t)
  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-insert-section
              #'org-roam-reflinks-insert-section
              #'org-roam-unlinked-references-insert-section))
  (org-roam-setup))
#+end_src

*** Capture Templates

**** TODO Consider customizing cap-templ for org-roam
** Autosync with git
#+begin_src emacs-lisp
(defun org-git-sync (repo)
  (interactive)
  (if (s-contains? (format "github.com/%s" repo) (buffer-file-name))
      (progn
        (magit-with-toplevel (magit-stage-1 nil (list buffer-file-name)))
        (magit-with-toplevel (magit-run-git
                              "commit" "-m"
                              (format "%s <%s>"
                                      (file-name-nondirectory (buffer-file-name))
                                      (format-time-string "%Y-%m-%dT%T"))))
        (magit-with-toplevel (magit-run-git "push")))))

(defun org-git-sync-org ()
  (interactive)
  (org-git-sync "org"))

(defun org-git-sync-org-roam ()
  (interactive)
  (org-git-sync "org-roam"))

(add-hook 'after-save-hook 'org-git-sync-org)
#+end_src
