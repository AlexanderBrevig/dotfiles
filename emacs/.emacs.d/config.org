* Emacs
** Fix UI
#+BEGIN_SRC emacs-lisp
    (when window-system
      (global-hl-line-mode t)
      (global-prettify-symbols-mode t))
    (global-display-line-numbers-mode 1)
    (setq display-line-numbers 'relative)
#+END_SRC
** Fix UX
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (setq inhibit-startup-message t)
  #+end_src
** Fix files
#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+end_src
* Packages
** use-package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
** EVIL
*** evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode))
#+end_src
*** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
*** leader
#+begin_src emacs-lisp
  (evil-set-leader nil (kbd "SPC"))
  (evil-set-leader 'normal (kbd "SPC"))
#+end_src
*** escape
#+begin_src emacs-lisp
  (define-key evil-insert-state-map (kbd "C-c C-c") 'evil-normal-state)
  (define-key evil-normal-state-map (kbd "C-c C-c") 'evil-normal-state)
#+end_src
*** lspkeys
#+begin_src emacs-lisp
  (evil-define-key 'normal lsp-mode-map (kbd "<leader>l") lsp-command-map)
#+end_src
** Looks
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italics t)
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src
** Utils
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+end_src
*** Shell
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "<C-return>") 'ansi-term)
#+end_src
*** IDO
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
*** Config management
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* LSP
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck :ensure t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (setq yas-verbosity 1 yas-wrap-around-region t)

    (with-eval-after-load 'yasnippet
      (setq yas-snippet-dirs '(yasnippet-snippets-dir)))
    (yas-reload-all)
    (yas-global-mode))
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
** LSP mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "<leader>l")
    :config
    (evil-define-key 'normal lsp-mode-map (kbd "<leader>l") lsp-command-map)
    :hook (
	   (go-mode . lsp)
	   ;;
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
  (use-package lsp-ui
    :ensure t
    :init (setq lsp-ui-sideline-enable t)
    :commands lsp-ui-sideline-mode)


  ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src
** Company code completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
		("C-j" . company-select-next)
		("C-k" . company-select-previous))
    :config
    (setq company-ide-delay 0)
    (setq company-minimum-previs-length 1)
    (setq company-tooltip-align-annotations t))
  (company-mode 1)
#+end_src
** Go mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook ((go-mode . lsp-deferred)
      (before-save . lsp-format-buffer)
      (before-save . lsp-organize-imports)))
#+end_src
